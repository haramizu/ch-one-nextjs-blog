id: 6GC7RJ4Q106xG69Wmwpiyg
name: トップページにおすすめのトピックを表示するようにする
fields:
  title:
    value: トップページにおすすめのトピックを表示するようにする
    type: ShortText
  description:
    value: ブログの記事一覧、カテゴリの記事一覧を取得して各ページの表示ができましたが、トップページでは Top Story の項目が True になっている記事のみを表示したいと思います。それでは Next.js のサンプルのトップページのクリーンナップからスタートします。
    type: LongText
  publishDate:
    value: 2024-04-12T10:00:00.0000000+09:00
    type: DateTime
  slug:
    value: show-top-story-list
    type: ShortText
  content:
    value: >-
      {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Next.js のデフォルトコンテンツの削除"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "現在トップページは Next.js が標準で用意しているページが表示されています。標準の設定を削除するために、まずは "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "src/app/page.tsx"
              },
              {
                "type": "text",
                "text": " のコンテンツを以下のように一度更新します。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "ts"
            },
            "content": [
              {
                "type": "text",
                "text": "export default function Home() {\n  return (\n    <main>\n      <h1>Content Hub ONE Blog</h1>\n      <ul>\n        <li>Top Story</li>\n        <li>Top Story</li>\n      </ul>\n    </main>\n  );\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "合わせて "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "src/app/layout.tsx"
              },
              {
                "type": "text",
                "text": " のファイルも以下のように書き換えます。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "ts"
            },
            "content": [
              {
                "type": "text",
                "text": "import type { Metadata } from \"next\";\nimport \"./globals.css\";\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "最後に、global.css ファイルに関しては Tailwind CSS を利用するにあたって必要な最小限の定義とします。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "css"
            },
            "content": [
              {
                "type": "text",
                "text": "@tailwind base;\n@tailwind components;\n@tailwind utilities;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "これでスタイルシートなども含めて標準で含まれているものは全て削除しました。結果、以下のようにトップページが表示できています。"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Postman でトップストーリーのみを取得する"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "今回はコンテンツのうち Top Story のチェックが true になっているデータのみを取得したいと思います。そこで、Postman を利用してクエリを作成しますが、where の項目で "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "topStory"
              },
              {
                "type": "text",
                "text": " の項目を選択すると "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "true"
              },
              {
                "type": "text",
                "text": " か "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "fales"
              },
              {
                "type": "text",
                "text": " の選択が可能となっており、簡単にクエリに条件を追加できます。"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "CHOMEDIA=K67qE91-pESFhrCAu6hJIA"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "表示をする順番は、公開日の新しい順で表示するように設定したいため、"
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "orderBy"
              },
              {
                "type": "text",
                "text": " の項目をチェック、表示順に関しては以下のような形で定義することができました。"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "CHOMEDIA=38Gvlr1SpUu69f1FHVw0cA"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "シンプルな結果を取得するために、以下の GraphQL を実行します。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "graphql"
            },
            "content": [
              {
                "type": "text",
                "text": "query AllBlog {\n    allBlog(where: { topStory_eq: true }, orderBy: PUBLISHDATE_DESC) {\n        total\n        results {\n            id\n            name\n            slug\n            title\n            topStory\n        }\n    }\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "結果として以下の Json データを取得しました。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "json"
            },
            "content": [
              {
                "type": "text",
                "text": "{\n    \"data\": {\n        \"allBlog\": {\n            \"total\": 3,\n            \"results\": [\n                {\n                    \"id\": \"BC1H5Xew1kmZCFyahppKgA\",\n                    \"name\": \"Content Hub ONE のデータを Postman で取得する\",\n                    \"slug\": \"graphql-postman\",\n                    \"title\": \"Content Hub ONE のデータを Postman で取得する\",\n                    \"topStory\": true\n                },\n                {\n                    \"id\": \"eBvk-EbDj0yVS2nv6rd--Q\",\n                    \"name\": \"Content Hub ONE CLI について\",\n                    \"slug\": \"ch-one-cli\",\n                    \"title\": \"Content Hub ONE CLI について\",\n                    \"topStory\": true\n                },\n                {\n                    \"id\": \"86Os_g8qDEOXajbTrP3_4A\",\n                    \"name\": \"Content Hub ONE とは？\",\n                    \"slug\": \"content-hub-one-overview\",\n                    \"title\": \"Content Hub ONE とは？\",\n                    \"topStory\": true\n                }\n            ]\n        }\n    }\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "このデータをトップページで表示できるように進めていきます。"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Next.js でトップストーリーを表示する"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "今回は検索条件を追加するだけのシンプルなクエリの変更となります。そこで、まず、以下のクエリを "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "src/interfaces/Blog/index.ts"
              },
              {
                "type": "text",
                "text": " のファイルに追加します。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "ts"
            },
            "content": [
              {
                "type": "text",
                "text": "export const AllTopStoryQuery =\n  `\n  query AllBlog {\n    allBlog(where: { topStory_eq: true }, orderBy: PUBLISHDATE_DESC) {\n        total\n        results {\n            ` +\n  BlogQuery +\n  `\n        }\n    }\n}\n`;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "続いて、"
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "src/utils/getBlog/index.ts"
              },
              {
                "type": "text",
                "text": " のファイルに以下の関数を追加します。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "ts"
            },
            "content": [
              {
                "type": "text",
                "text": "export async function getTopStory() {\n  const results: AllBlogResponse = (await fetchGraphQL(\n    AllTopStoryQuery\n  )) as AllBlogResponse;\n\n  const contents: Partial<Blog>[] = [];\n\n  results.data.allBlog.results.forEach((post: Partial<Blog>) => {\n    contents.push({\n      id: post.id,\n      name: post.name,\n      title: post.title,\n      description: post.description,\n      publishDate: post.publishDate,\n      slug: post.slug,\n      hero: post.hero,\n      tag: post.tag,\n      content: post.content,\n    });\n  });\n\n  return contents;\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "これで準備ができたので、タイトル一覧を取得していきます。"
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "src/app/page.tsx"
              },
              {
                "type": "text",
                "text": " のファイルを以下のように書き換えます。"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "ts"
            },
            "content": [
              {
                "type": "text",
                "text": "import { getTopStory } from \"@/utils/getBlog\";\n\nexport default async function Home() {\n  const posts = await getTopStory();\n  return (\n    <main>\n      <h1>Content Hub ONE Top Story</h1>\n      <ul>\n        {posts.map((post) => (\n          <>\n            <li key={post.id}>{post.title}</li>\n          </>\n        ))}\n      </ul>\n    </main>\n  );\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "実行結果は、以下のようになります。"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "CHOMEDIA=Y89rzcA1DUunZ71S4hCG-g"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "まとめ"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "これで Next.js のプロジェクトでトップページには Top Story のみのコンテンツを、ブログのページにはブログのタイトル一覧、タグのページにはカテゴリ一覧を表示することができました。ここが最初のステップになります。これまでのコードは、以下の URL から参照することができます。"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "link",
                            "attrs": {
                              "href": "https://github.com/haramizu/ch-one-nextjs-blog/tree/step-1",
                              "target": "_blank",
                              "rel": "noopener noreferrer nofollow",
                              "class": null
                            }
                          }
                        ],
                        "text": "https://github.com/haramizu/ch-one-nextjs-blog/tree/step-1"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph"
          },
          {
            "type": "paragraph"
          }
        ]
      }
    type: RichText
  topStory:
    value: false
    type: Boolean
  languages:
    value:
    - id: ja
    type: Select
  tag:
    value:
    - type: Link
      relatedType: Content
      id: 7NQVbF9gskiIHFSgtac2sw
    - type: Link
      relatedType: Content
      id: B_1RVPmqs0W7mbP5TzgcCg
    type: Reference
  hero:
    value:
    - type: Link
      relatedType: Media
      id: Y89rzcA1DUunZ71S4hCG-g
    type: Media
